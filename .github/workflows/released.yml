name: release published

on:
  release:
    types: [ published ]

jobs:
  build-api:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Docker build api
        id: build
        uses: docker/build-push-action@v1
        with:
          path: api
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          registry: docker.pkg.github.com
          repository: fuxingloh/smu-goldman-hackathon/api
          tag_with_ref: true

  build-api-news:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Docker build api-news
        id: build
        uses: docker/build-push-action@v1
        with:
          path: api-news
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          registry: docker.pkg.github.com
          repository: fuxingloh/smu-goldman-hackathon/api-news
          tag_with_ref: true

  build-api-data:
    runs-on: ubuntu-latest
    steps:
      - uses: olegtarasov/get-tag@v2
      - uses: actions/checkout@v2

      - uses: actions/setup-java@v1.3.0
        with:
          java-version: 11

      - name: Docker build api-data
        id: api-data
        working-directory: api-data
        run: |
          ./gradlew bootBuildImage
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login -u ${{ github.actor }} --password-stdin docker.pkg.github.com
          docker tag docker.pkg.github.com/fuxingloh/smu-goldman-hackathon/api-data:latest docker.pkg.github.com/fuxingloh/smu-goldman-hackathon/api-data:$GIT_TAG_NAME
          docker push docker.pkg.github.com/fuxingloh/smu-goldman-hackathon/api-data:$GIT_TAG_NAME

  deploy:
    name: ECS deploy
    runs-on: ubuntu-latest
    needs: [ build-api, build-api-news, build-api-data ]
    strategy:
      matrix:
        service: [ api, api-news, api-data ]

    steps:
      - uses: olegtarasov/get-tag@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition ${{ matrix.service }} --query taskDefinition > task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: service
          image: docker.pkg.github.com/fuxingloh/smu-goldman-hackathon/${{ matrix.service }}:${{ env.GIT_TAG_NAME }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ matrix.service }}
          cluster: Mavis_GS_Cluster
          wait-for-service-stability: true
